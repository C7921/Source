{{!< default}} <div class="content-area">
  <main class="site-main">
    <div class="gh-feed post-feed" id="masonry-gallery">
      {{#foreach posts}}
      {{#if feature_image}}
      <div class="grid-item">
        <article class="post">
          <a class="post-link" href="{{url}}">
            <img class="post-image" src="{{feature_image}}" alt="{{title}}" width="{{img_width}}"
              height="{{img_height}}">
            <div class="post-title-overlay">
              <h2 class="post-title">{{title}}</h2>
            </div>
          </a>
          <a href="{{feature_image}}" class="post-lightbox" data-title="{{title}}">{{> "maximize"}}</a>
        </article>
      </div>
      {{/if}}
      {{/foreach}}
    </div>

    {{pagination}}
  </main>
  </div>

  <!-- PhotoSwipe template -->
  <div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="pswp__bg"></div>
    <div class="pswp__scroll-wrap">
      <div class="pswp__container">
        <div class="pswp__item"></div>
        <div class="pswp__item"></div>
        <div class="pswp__item"></div>
      </div>
      <div class="pswp__ui pswp__ui--hidden">
        <div class="pswp__top-bar">
          <div class="pswp__counter"></div>
          <button class="pswp__button pswp__button--close" title="Close (Esc)"></button>
          <button class="pswp__button pswp__button--share" title="Share"></button>
          <button class="pswp__button pswp__button--fs" title="Toggle fullscreen"></button>
          <button class="pswp__button pswp__button--zoom" title="Zoom in/out"></button>
          <div class="pswp__preloader">
            <div class="pswp__preloader__icn">
              <div class="pswp__preloader__cut">
                <div class="pswp__preloader__donut"></div>
              </div>
            </div>
          </div>
        </div>
        <div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap">
          <div class="pswp__share-tooltip"></div>
        </div>
        <button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)"></button>
        <button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)"></button>
        <div class="pswp__caption">
          <div class="pswp__caption__center"></div>
        </div>
      </div>
    </div>
  </div>

  <style>
    /* Import EB Garamond for the titles */
    @import url('https://fonts.googleapis.com/css2?family=EB+Garamond:wght@400;500;600&display=swap');

    /* Masonry gallery styles */
    .post-feed {
      opacity: 1;
      visibility: visible;
    }

    .grid-item {
      width: 100%;
      padding: var(--grid-gap);
    }

    /* Post styles */
    .post {
      position: relative;
      margin: 0;
      transition: transform 0.2s ease;
      overflow: hidden;
    }

    .post:hover {
      transform: translateY(-2px);
    }

    .post-image {
      width: 100%;
      height: auto;
      transition: transform 0.3s ease;
    }

    .post:hover .post-image {
      transform: scale(1.03);
    }

    /* Title overlay */
    .post-title-overlay {
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      background: rgba(0, 0, 0, 0.7);
      color: white;
      padding: 10px 15px;
      transform: translateY(100%);
      transition: transform 0.3s ease;
      font-family: 'EB Garamond', Georgia, serif;
    }

    .post-title {
      margin: 0;
      font-size: 1.2rem;
      line-height: 1.3;
      font-weight: 500;
      letter-spacing: -0.01em;
      color: white;
    }

    .post:hover .post-title-overlay {
      transform: translateY(0);
    }

    /* Lightbox icon */
    .post-lightbox {
      position: absolute;
      bottom: 15px;
      right: 15px;
      background: rgba(0, 0, 0, 0.7);
      color: white;
      opacity: 0;
      transform: scale(0.8);
    }

    .post:hover .post-lightbox {
      opacity: 1;
      transform: scale(1);
    }

    /* Responsive grid adjustments */
    @media (max-width: 640px) {
      .post-feed {
        --grid-gap: 5px;
      }

      .grid-item {
        width: 50%;
      }
    }

    @media (min-width: 641px) and (max-width: 1019px) {
      .post-feed {
        --grid-gap: 8px;
      }

      .grid-item {
        width: 33.333%;
      }
    }

    @media (min-width: 1020px) and (max-width: 1349px) {
      .grid-item {
        width: 25%;
      }
    }

    @media (min-width: 1350px) and (max-width: 1679px) {
      .grid-item {
        width: 20%;
      }
    }

    @media (min-width: 1680px) {
      .grid-item {
        width: 16.666%;
      }
    }
  </style>

  <script>
    // Initialize Masonry on the gallery
    document.addEventListener('DOMContentLoaded', function () {
      // Initialize masonry layout
      const gallery = document.getElementById('masonry-gallery');

      // Wait for images to load to prevent layout issues
      imagesLoaded(gallery, function () {
        const masonryGrid = new Masonry(gallery, {
          itemSelector: '.grid-item',
          percentPosition: true,
          transitionDuration: '0.3s',
          hiddenStyle: {
            opacity: 0,
            transform: 'translateY(20px)'
          },
          visibleStyle: {
            opacity: 1,
            transform: 'translateY(0)'
          }
        });

        // Layout again after short delay to ensure all images are properly sized
        setTimeout(function () {
          masonryGrid.layout();
          gallery.classList.add('initialized');
        }, 100);

        // Handle window resize events
        let resizeTimeout;
        window.addEventListener('resize', function () {
          clearTimeout(resizeTimeout);
          resizeTimeout = setTimeout(function () {
            masonryGrid.layout();
          }, 300);
        });

        // Initialize PhotoSwipe for lightbox functionality
        initPhotoSwipe(gallery);
      });
    });

    function initPhotoSwipe(galleryElement) {
      const lightboxLinks = galleryElement.querySelectorAll('.post-lightbox');

      lightboxLinks.forEach(function (lightboxLink) {
        lightboxLink.addEventListener('click', function (e) {
          e.preventDefault();

          // Find all posts with images to create PhotoSwipe gallery
          const items = [];
          const posts = galleryElement.querySelectorAll('.post');
          let index = 0;
          let clickedIndex = 0;

          posts.forEach(function (post, i) {
            const img = post.querySelector('.post-image');
            const lightbox = post.querySelector('.post-lightbox');
            const title = lightbox.getAttribute('data-title');

            if (img) {
              // Add image to PhotoSwipe items
              items.push({
                src: img.getAttribute('src'),
                w: img.naturalWidth || 1200, // Fallback if size not available
                h: img.naturalHeight || 800, // Fallback if size not available
                title: title
              });

              // Check if this is the clicked image
              if (lightbox === e.currentTarget) {
                clickedIndex = index;
              }

              index++;
            }
          });

          // Open PhotoSwipe with the gallery
          const pswpElement = document.querySelector('.pswp');
          const options = {
            index: clickedIndex,
            bgOpacity: 0.9,
            showHideOpacity: true,
            shareEl: false,
            clickToCloseNonZoomable: true,
            getThumbBoundsFn: function (index) {
              // Get position of element relative to viewport
              const thumbnail = posts[index].querySelector('.post-image');
              const pageYScroll = window.pageYOffset || document.documentElement.scrollTop;
              const rect = thumbnail.getBoundingClientRect();

              return {
                x: rect.left,
                y: rect.top + pageYScroll,
                w: rect.width
              };
            }
          };

          // Initialize PhotoSwipe
          const gallery = new PhotoSwipe(pswpElement, PhotoSwipeUI_Default, items, options);

          // Handle cases where image size is not properly set
          gallery.listen('gettingData', function (index, item) {
            if (item.w < 1 || item.h < 1) {
              const img = new Image();
              img.onload = function () {
                item.w = this.width;
                item.h = this.height;
                gallery.updateSize(true);
              };
              img.src = item.src;
            }
          });

          gallery.init();
        });
      });
    }
  </script>